import React from 'react';
import ReactDOM from 'react-dom';

class World extends React.Component {
  render() {
    return (
        <div>
        <h1>Products</h1>
        <div className="row">
        <div className="col-md-4">
        <h2>App 1</h2>
        <p>Donec id elit non mi porta gravida at eget metus.</p>
        <p><a className="btn" href="#">View details »</a></p>
        </div>
        <div className="col-md-4">
        <h2>App 2</h2>
        <p>Donec id elit non mi porta gravida at eget metus.</p>
        <p><a className="btn" href="#">View details »</a></p>
        </div>
        <div className="col-md-4">
        <h2>App 3</h2>
        <p>Donec id elit non mi porta gravida at eget metus.</p>
        <p><a className="btn" href="#">View details »</a></p>
        </div>
        </div>

        </div>
        )
}
}

var Product = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
},

render: function() {
    return (
      <div className="product">
      <h3 className="productName">
      {this.props.productName}
      </h3>
      <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
      );
}
});

var ProductBox = React.createClass({
  loadProductsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
    }.bind(this),
    error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
    }.bind(this)
});
},
handleProductSubmit: function(product) {
    var products = this.state.data;
    // Optimistically set an id on the new product. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    product.id = Date.now();
    var newProducts = products.concat([product]);
    this.setState({data: newProducts});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: product,
      success: function(data) {
        this.setState({data: data});
    }.bind(this),
    error: function(xhr, status, err) {
        this.setState({data: products});
        console.error(this.props.url, status, err.toString());
    }.bind(this)
});
},
getInitialState: function() {
    return {data: []};
},
componentDidMount: function() {
    this.loadProductsFromServer();
    setInterval(this.loadProductsFromServer, this.props.pollInterval);
},
render: function() {
    return (
      <div className="productBox">
      <div className="Jumbotron">
      <h1>Solarlux Web Apps</h1>
      </div>
      <ProductList data={this.state.data} />
      <ProductForm onProductSubmit={this.handleProductSubmit} />
      </div>
      );
}
});

var ProductList = React.createClass({
  render: function() {
    var productNodes = this.props.data.map(function(product) {
        return (
            <div className="productList">
            <Product productName="Best app A">Really good one</Product>
            <Product productName="Best app B">Even better</Product>
            </div>
            );
    });

    //   return (
    //     <Product productName={product.productName} key={product.id}>
    //       {product.text}
    //     </Product>
    //   );
    // });
    return (
      <div className="productList">
      {productNodes}
      </div>
      );
}
});

var ProductForm = React.createClass({
  getInitialState: function() {
    return {productName: '', text: ''};
},
handleproductNameChange: function(e) {
    this.setState({productName: e.target.value});
},
handleTextChange: function(e) {
    this.setState({text: e.target.value});
},
handleSubmit: function(e) {
    e.preventDefault();
    var productName = this.state.productName.trim();
    var text = this.state.text.trim();
    if (!text || !productName) {
      return;
  }
  this.props.onProductSubmit({productName: productName, text: text});
  this.setState({productName: '', text: ''});
},
render: function() {
    return (

      <form className="productForm" onSubmit={this.handleSubmit}>
      <input
      type="text"
      placeholder="Product name"
      value={this.state.productName}
      onChange={this.handleproductNameChange}
      />
      <input
      type="text"
      placeholder="Description"
      value={this.state.text}
      onChange={this.handleTextChange}
      />
      <input type="submit" value="Post" />
      </form>
      );
}
});

ReactDOM.render(<ProductBox url="/api/products" pollInterval={2000} />,
    document.getElementById('content'));
// ReactDOM.render(<World/>, document.getElementById('content'));
