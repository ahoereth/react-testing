import React from 'react';
import ReactDOM from 'react-dom';
import Jumbo from './header.js';
import {Grid,Row,Col} from 'react-bootstrap';

// class World extends React.Component {
//   render() {
//     return (
//       <div>
//       <h1>Products</h1>
//       <div className="row">
//       <div className="col-md-4">
//       <h2>App 1</h2>
//       <p>Donec id elit non mi porta gravida at eget metus.</p>
//       <p><a className="btn" href="#">View details »</a></p>
//       </div>
//       <div className="col-md-4">
//       <h2>App 2</h2>
//       <p>Donec id elit non mi porta gravida at eget metus.</p>
//       <p><a className="btn" href="#">View details »</a></p>
//       </div>
//       <div className="col-md-4">
//       <h2>App 3</h2>
//       <p>Donec id elit non mi porta gravida at eget metus.</p>
//       <p><a className="btn" href="#">View details »</a></p>
//       </div>
//       </div>
//       </div>
//       )
//   }
// };

// var Component = React.createClass({
//     render: function() {
//         return <div>{ this.props.param }</div>;
//     }
// });

// var Hello = React.createClass({
//   render: function() {
//     var elements = this.props.elements || [];
//     var components = elements.map(
//       function(b) {
//         return <Component param={b} />;
//       }
//       );

//     var groups = [];
//     var children = [];
//     while(components.length > 0) {
//       children.push(components.shift());
//       if (children.length === 5) {
//         groups.push(<div className="grid grid-pad"> {children}</div>);
//         children = [];
//       }
//     }
// // remaining
// if (children.length > 0 ) {
//   groups.push(<div className="grid grid-pad">
//     {children}</div>);
//   }

//   return (
//     <div className='holder'>
//     {groups}
//     </div>
//     );
//   }
// });

var Product = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());

    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="product">
      <h3 className="productName">
      {this.props.productName}
      </h3>
      <span dangerouslySetInnerHTML={this.rawMarkup()} />
      <div className="screenshot">
      <img src= {this.props.src} />
      </div>
      </div>
      );
  }
});

var ProductBox = React.createClass({
  loadProductsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({ data: data });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleProductSubmit: function(product) {
    var products = this.state.data;
        // Optimistically set an id on the new product. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        product.id = Date.now();
        var newProducts = products.concat([product]);
        this.setState({ data: newProducts });
        $.ajax({
          url: this.props.url,
          dataType: 'json',
          type: 'POST',
          data: product,
          success: function(data) {
            this.setState({ data: data });
          }.bind(this),
          error: function(xhr, status, err) {
            this.setState({ data: products });
            console.error(this.props.url, status, err.toString());
          }.bind(this)
        });
      },
      getInitialState: function() {
        return { data: [] };
      },
      componentDidMount: function() {
        this.loadProductsFromServer();
        setInterval(this.loadProductsFromServer, this.props.pollInterval);
      },
      render: function() {
        return (
          <div className="productBox">
          <h1>Solarlux Web Apps</h1>
          <div className="row">
          <ProductList data={this.state.data} />
          </div>
          <ProductForm onProductSubmit={this.handleProductSubmit} />
          </div>
          );
      }
    });

var ProductList = React.createClass({
  render: function() {
    var productNodes = this.props.data.map(function(product) {
      return (
        <div>
        <Product productName={product.productName} key={product.id} text ={product.text} src={product.src}>
        {product.text}
        </Product>
        </div>
        );
    });
    return (
      <div className="productList">
      <Grid>
      <Row className="show-grid">
      <Col sm={6} md={3}>
      {productNodes}
      </Col>
      </Row>
      </Grid>
      </div>
      );
  }
});

var ProductForm = React.createClass({
  getInitialState: function() {
    return { productName: '', text: '' , src: ''};
  },
  handleProductNameChange: function(e) {
    this.setState({ productName: e.target.value });
  },
  handleTextChange: function(e) {
    this.setState({ text: e.target.value });
  },
  handleImageChange: function(e) {
    this.setState({ src: e.target.value });
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var productName = this.state.productName.trim();
    var filename = $('input[type=file]').val().split('\\').pop();
    var text = this.state.text.trim();
    if (!text || !productName) {
      return;
    }
    this.props.onProductSubmit({ productName: productName, text: text, src: filename });
    this.setState({ productName: '', text: '',src: '' });
  },
  render: function() {
    return (
      <form className="productForm" onSubmit={this.handleSubmit}>

      <h3>Upload an application (in development)</h3>
      <input
      type="text"
      placeholder="Product name"
      value={this.state.productName}
      onChange={this.handleProductNameChange}
      />
      <input
      type="text"
      placeholder="Description"
      value={this.state.text}
      onChange={this.handleTextChange}
      />
      <input
      type="file"
      placeholder="Product screenshot"
      value={this.state.src}
      onChange={this.handleImageChange}
      />
      <input type="submit" value="Post" />
      </form>
      );
  }
});

ReactDOM.render(<ProductBox url="/api/products" pollInterval={2000} />,
  document.getElementById('content')
  );
